const {
  Client,
  GatewayIntentBits,
  Partials,
  PermissionsBitField,
} = require("discord.js");
const express = require("express");
const app = express();
require("dotenv").config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

const lobbies = new Map();

// === Keep-alive for Render ===
app.get("/", (req, res) => res.send("Bot is alive!"));
app.listen(3000, () => console.log("Web server started"));

// === When bot is ready ===
client.once("ready", () => {
  console.log(`Bot is ready: ${client.user.tag}`);
});

// === Commands ===
client.on("messageCreate", async (msg) => {
  if (msg.author.bot) return;

  // !create-lobby-message
  if (msg.content === "!create-lobby-message") {
    const sent = await msg.channel.send(
      "**–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏:**\n" +
      "üî´ ‚Äî CS 2 (5 –∏–≥—Ä–æ–∫–æ–≤)\n" +
      "‚öîÔ∏è ‚Äî Apex Legends (3 –∏–≥—Ä–æ–∫–∞)\n" +
      "üîÆ ‚Äî Dota 2 (5 –∏–≥—Ä–æ–∫–æ–≤)"
    );
    await sent.react("üî´");
    await sent.react("‚öîÔ∏è");
    await sent.react("üîÆ");
  }

  // !kick
  if (msg.content.startsWith("!kick")) {
    const creatorId = lobbies.get(msg.channel.id)?.owner;
    if (!creatorId || msg.author.id !== creatorId)
      return msg.reply("–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ª–æ–±–±–∏.");

    const member = msg.mentions.members.first();
    if (!member) return msg.reply("–£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∏–∫–∞.");

    if (member.voice.channel) await member.voice.disconnect().catch(() => {});
    await msg.channel.send(`${member.user.tag} –±—ã–ª –∫–∏–∫–Ω—É—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.`);
  }

  // !close
  if (msg.content === "!close") {
    const lobby = lobbies.get(msg.channel.id);
    if (!lobby) return msg.reply("–≠—Ç–æ –Ω–µ –ª–æ–±–±–∏.");
    if (msg.author.id !== lobby.owner)
      return msg.reply("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –ª–æ–±–±–∏.");

    const voice = await msg.guild.channels.fetch(lobby.voiceChannel).catch(() => {});
    const text = await msg.guild.channels.fetch(lobby.textChannel).catch(() => {});

    if (voice) await voice.delete().catch(() => {});
    if (text) await text.delete().catch(() => {});

    lobbies.delete(msg.channel.id);
  }

  // !help
  if (msg.content === "!help") {
    return msg.channel.send(
      "**–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n" +
      "`!create-lobby-message` ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä—ã.\n" +
      "`!kick @user` ‚Äî –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ª–æ–±–±–∏).\n" +
      "`!close` ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–≤–æ–µ –ª–æ–±–±–∏ (—É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã).\n" +
      "`!lobbies` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ª–æ–±–±–∏.\n"
    );
  }

  // !lobbies
  if (msg.content === "!lobbies") {
    if (!msg.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return msg.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
    }

    if (lobbies.size === 0) {
      return msg.channel.send("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏.");
    }

    let response = "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏:**\n";
    for (const [channelId, lobby] of lobbies) {
      const user = await client.users.fetch(lobby.owner).catch(() => null);
      response += `‚Ä¢ –ò–≥—Ä–∞: ${lobby.limit === 3 ? "Apex Legends" : "CS 2 / Dota 2"}\n`;
      response += `  –°–æ–∑–¥–∞—Ç–µ–ª—å: ${user ? user.tag : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
      response += `  –¢–µ–∫—Å—Ç-–∫–∞–Ω–∞–ª: <#${lobby.textChannel}>\n`;
      response += `  –ì–æ–ª–æ—Å–æ–≤–æ–π: <#${lobby.voiceChannel}>\n\n`;
    }

    msg.channel.send(response);
  }
});

// === Reaction handler: create lobby ===
client.on("messageReactionAdd", async (reaction, user) => {
  if (user.bot) return;
  const { message } = reaction;
  if (!message.guild || !["üî´", "‚öîÔ∏è", "üîÆ"].includes(reaction.emoji.name)) return;

  const member = await message.guild.members.fetch(user.id);

  const existingLobby = [...lobbies.values()].find(lobby => lobby.owner === user.id);
  if (existingLobby) {
    return member.send("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏. –ò—Å–ø–æ–ª—å–∑—É–π `!close`, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å.").catch(() => {});
  }

  let game = "";
  let limit = 0;

  if (reaction.emoji.name === "üî´") {
    game = "CS 2";
    limit = 5;
  } else if (reaction.emoji.name === "‚öîÔ∏è") {
    game = "Apex Legends";
    limit = 3;
  } else if (reaction.emoji.name === "üîÆ") {
    game = "Dota 2";
    limit = 5;
  }

  const category = message.channel.parent;

  const voice = await message.guild.channels.create({
    name: `${game} Lobby - ${user.username}`,
    type: 2,
    parent: category ?? undefined,
    userLimit: limit,
    permissionOverwrites: [
      {
        id: message.guild.id,
        allow: [PermissionsBitField.Flags.Connect, PermissionsBitField.Flags.ViewChannel],
      },
    ],
  });

  const text = await message.guild.channels.create({
    name: `${game.toLowerCase()}-${user.username}`,
    type: 0,
    parent: category ?? undefined,
    permissionOverwrites: [
      {
        id: message.guild.id,
        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
      },
    ],
  });

  await text.send(
    `**${user.username}** —Å–æ–∑–¥–∞–ª –ª–æ–±–±–∏ –Ω–∞ ${limit} –∏–≥—Ä–æ–∫–æ–≤ (${game})!\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π \`!kick @user\` –∏–ª–∏ \`!close\` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.`
  );

  lobbies.set(text.id, {
    voiceChannel: voice.id,
    textChannel: text.id,
    owner: user.id,
    limit: limit,
  });

  const interval = setInterval(async () => {
    const vChan = await message.guild.channels.fetch(voice.id).catch(() => null);
    const tChan = await message.guild.channels.fetch(text.id).catch(() => null);
    if (!vChan || !tChan) return clearInterval(interval);
    if (vChan.members.size === 0) {
      await vChan.delete().catch(() => {});
      await tChan.delete().catch(() => {});
      lobbies.delete(text.id);
      clearInterval(interval);
    }
  }, 15000);
});

// === Start the bot ===
client.login(process.env.TOKEN);
